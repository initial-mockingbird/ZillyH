data Proof a 

x :: Proof (Apply (FlipSym1 ApplySym0) Int)
x = undefined

x1 :: Proof '[Show]
x1 = undefined

x0 ::  Proof (ApplySym2 (FlipSym1 ApplySym0) Int )
x0 = undefined

type ShowSym0 :: a ~> Constraint
data ShowSym0 x

type ShowSym1 :: a -> Constraint
type family ShowSym1 a where
  ShowSym1 a = Show a

type instance Apply ShowSym0 x = Show x

type MCS0 :: Constraint ~> Constraint ~> Constraint
data MCS0 a

type MCS1 :: Constraint -> Constraint ~> Constraint
data MCS1 a b

type MCS2 :: Constraint -> Constraint -> Constraint
type family MCS2 a b where
  MCS2 a b = (a,b)

type instance Apply (MCS1 a) x = (a,x)
type instance Apply MCS0 a     =  MCS1 a

x2 ::  Proof (Apply (ApplySym1 (FlipSym1 ApplySym0)) Int )
x2 = undefined


x3 ::  Proof ( Apply (FlipSym1 ApplySym0) Int <$> '[ShowSym0] )
x3 = undefined

x4 :: Proof (Foldr MCS0 (() :: Constraint) (Apply (FlipSym1 ApplySym0) Int <$> '[ShowSym0]) )
x4 = undefined

data Existential (f :: Type -> Type) (cs :: [Type -> Constraint]) where
  MkEx :: forall f cs a. () =>  f a -> Existential f cs