///
/// array.sym
///
/// ZenVM test suite for arrays
///

//

sys.reset();

// 1 D

var L0 :- ?;
var L1 :- ?;
var L2 :- ?;
var L3 :- ?;

verify L0[1.3] = #VALUE!

L0 :- [ 0,  1,  2,  3];
L1 :- [10, 11, 12, 13];
L2 :- [20, 21, 22, 23];
L3 :- [30, 31, 32, 33];

verify length(L0) = 4

verify L0[1.3] = #VALUE!

verify L0[0] = 0
verify L0[1] = 1
verify L0[2] = 2
verify L0[3] = 3

verify L0[-1] = #REF!
verify L0[ 4] = #REF!

verify L0[32767] = #REF!
verify L0[32768] = #REF!
verify L0[99999] = #REF!

array[] => var V0 :- [ 0,  1,  2,  3];
array[] => var V1 :- [10, 11, 12, 13];
array[] => var V2 :- [20, 21, 22, 23];
array[] => var V3 :- [30, 31, 32, 33];

verify V0[1.3] = #VALUE!

verify V0 = L0
verify V1 = L1
verify V2 = L2
verify V3 = L3

// 2 D

var LL  :- [[0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]];

array[] => var AL  :- [L0, L1, L2, L3];

array[] => var AV  :- [V0, V1, V2, V3];

array[] => array [] => var VV :- [[0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]];

verify LL = AL
verify AL = AV
verify AV = VV
verify VV = LL

var ML :- [L0, L1, L2, L3];
array[] => var MV :- [L0, L1, L2, L3];

verify ML = MV
verify ML = AL
verify ML = AV
verify ML = VV
verify ML = LL
verify MV = AL
verify MV = AV
verify MV = VV
verify MV = LL

//

var LQ :- [LL[0], LL[1], LL[2], LL[3]];

verify LQ = MV
verify LQ = AL
verify LQ = AV
verify LQ = VV
verify LQ = LL

// 3 D

array[] => array[] => array[] => lazy var W :- [
	[
		[  0,   1,   2,   3],
		[ 10,  11,  12,  13],
		[ 20,  21,  22,  23],
		[ 30,  31,  32,  33]
	],
	[
		[100, 101, 102, 103],
		[110, 111, 112, 113],
		[120, 121, 122, 123],
		[130, 131, 132, 133]
	],
	[
		[200, 201, 202, 203],
		[210, 211, 212, 213],
		[220, 221, 222, 223],
		[230, 231, 232, 233]
	],
	[
		[300, 301, 302, 303],
		[310, 311, 312, 313],
		[320, 321, 322, 323],
		[330, 331, 332, 333]
	]
];

verify W[0] = MV
verify W[0] = AL
verify W[0] = AV
verify W[0] = VV
verify W[0] = LL
verify W[0] = LQ

//

array[,,] => lazy var W3 :- [
	[
		[  0,   1,   2,   3],
		[ 10,  11,  12,  13],
		[ 20,  21,  22,  23],
		[ 30,  31,  32,  33]
	],
	[
		[100, 101, 102, 103],
		[110, 111, 112, 113],
		[120, 121, 122, 123],
		[130, 131, 132, 133]
	],
	[
		[200, 201, 202, 203],
		[210, 211, 212, 213],
		[220, 221, 222, 223],
		[230, 231, 232, 233]
	],
	[
		[300, 301, 302, 303],
		[310, 311, 312, 313],
		[320, 321, 322, 323],
		[330, 331, 332, 333]
	]
];

verify W3[0, 0, 0..3] = MV[0]
verify W3[0, 1, 0..3] = MV[1]
verify W3[0, 2, 0..3] = MV[2]
verify W3[0, 3, 0..3] = MV[3]

verify W3[0, 0, 0..3] = AL[0]
verify W3[0, 1, 0..3] = AL[1]
verify W3[0, 2, 0..3] = AL[2]
verify W3[0, 3, 0..3] = AL[3]

verify W3[0, 0, 0..3] = AV[0]
verify W3[0, 1, 0..3] = AV[1]
verify W3[0, 2, 0..3] = AV[2]
verify W3[0, 3, 0..3] = AV[3]

verify W3[0, 0, 0..3] = VV[0]
verify W3[0, 1, 0..3] = VV[1]
verify W3[0, 2, 0..3] = VV[2]
verify W3[0, 3, 0..3] = VV[3]

verify W3[0, 0, 0..3] = LL[0]
verify W3[0, 1, 0..3] = LL[1]
verify W3[0, 2, 0..3] = LL[2]
verify W3[0, 3, 0..3] = LL[3]

verify W3[0, 0, 0..3] = LQ[0]
verify W3[0, 1, 0..3] = LQ[1]
verify W3[0, 2, 0..3] = LQ[2]
verify W3[0, 3, 0..3] = LQ[3]

//

sys.reset();

array[] => array[] => var w2 := [ [42], [67] ];
w2[0][0] := 67;
w2[1][0] := 42;

verify w2[0][0] = 67
verify w2[1][0] = 42

//

sys.reset();

array[] => array[] => var w2 := [ [42], [67] ];
w2 := [ [67], [42] ];

verify w2[0][0] = 67
verify w2[1][0] = 42

//

sys.reset();

array[] => array[] => var w2;
w2 := [ [42], [67] ];
w2[0][0] := 67;
w2[1][0] := 42;

verify w2[0][0] = 67
verify w2[1][0] = 42

//

sys.reset();

array[] => var a := [ 42 ];
verify a[0] = 42
a[0] := a[0] + 22;
verify a[0] = 64
a := [ 67 ];
verify a[0] = 67

//

sys.reset();

array[] => var a := [ 42 ];
verify a[0] = 42
a := [ a[0] + 22 ];
verify a[0] = 64
a := [ 67 ];
verify a[0] = 67

//

sys.reset();

array[] => var a;
a := [ 42 ];
verify a[0] = 42
a[0] := a[0] + 22;
verify a[0] = 64
a := [ 67 ];
verify a[0] = 67

//

sys.reset();

:: ar := [ (0, 0), (1, 1), (2, 1), (3, 2), (4, 3), (5, 5), (6, 8) ];

verify ar[0] = (0, 0)
verify ar[1] = (1, 1)
verify ar[2] = (2, 1)
verify ar[3] = (3, 2)
verify ar[4] = (4, 3)
verify ar[5] = (5, 5)
verify ar[6] = (6, 8)

verify ar[0][0] = 0
verify ar[1][0] = 1
verify ar[5][0] = 5
verify ar[6][0] = 6

verify ar[0][1] = 0
verify ar[1][1] = 1
verify ar[5][1] = 5
verify ar[6][1] = 8

///
/// 2D
///

sys.reset();

array[,] => lazy var M :- [[0, 1], [2, 3]];

verify M    = (array[2,2] => var)(0, 1, 2, 3)

verify M[0..1, 0..1] = M

verify M[0, 0..1] = [0, 1]
verify M[1, 0..1] = [2, 3]
verify M[0..1, 0] = [0, 2]
verify M[0..1, 1] = [1, 3]

verify M[0, 0] = 0
verify M[0, 1] = 1
verify M[1, 0] = 2
verify M[1, 1] = 3

//

sys.reset();

array[,] => lazy :: M :- [[0, 1], [2, 3]];

// verify M = (array[2,2] => var)(0, 1, 2, 3)
verify (array[2,2] => var)(0, 1, 2, 3) = M

verify M[0..1, 0..1] = M

verify M[0, 0..1] = [0, 1]
verify M[1, 0..1] = [2, 3]
verify M[0..1, 0] = [0, 2]
verify M[0..1, 1] = [1, 3]

verify M[0, 0] = 0
verify M[0, 1] = 1
verify M[1, 0] = 2
verify M[1, 1] = 3

//

sys.reset();

array[,] => :: M :- [[0, 1], [2, 3]];

// verify M = (array[2,2] => var)(0, 1, 2, 3)
verify (array[2,2] => var)(0, 1, 2, 3) = M

verify M[0..1, 0..1] = M

verify M[0, 0..1] = [0, 1]
verify M[1, 0..1] = [2, 3]
verify M[0..1, 0] = [0, 2]
verify M[0..1, 1] = [1, 3]

verify M[0, 0] = 0
verify M[0, 1] = 1
verify M[1, 0] = 2
verify M[1, 1] = 3

//

sys.reset();

array[] => lazy var a :- [ 0, 1 ];

verify | a | = 2
verify a[0] = 0
verify a[1] = 1

a :- [ 0, 1, 2, 3 ];

verify | a | = 4
verify a[0] = 0
verify a[1] = 1
verify a[2] = 2
verify a[3] = 3

//

sys.reset();

array[] => lazy var a :- [ 0, 1, 2, 3 ];

verify | a | = 4
verify a[0] = 0
verify a[1] = 1
verify a[2] = 2
verify a[3] = 3

a := [ 0, 1 ];

verify | a | = 2

verify a[0] = 0
verify a[1] = 1

//

sys.reset();

array[,] => var a := [
	[ uniform(), uniform() ],
	[ uniform(), uniform() ]
];

:: wrong := a[0][0];

verify wrong = #REF!
>>
verify wrong = #REF!

:: right := a[0, 0];

verify 0 < right && right < 1
>>
verify 0 < right && right < 1

//

sys.reset();

array[] => var empty1D;
array[,] => var empty2D;
array[,,] => var empty3D;

array[0] => var degen0;

verify empty1D = degen0

array[0,1] => var degen01;
array[1,0] => var degen10;

verify empty2D = degen01
verify empty2D = degen10

array[0,1,1] => var degen011;
array[1,0,1] => var degen101;
array[1,1,0] => var degen110;

verify empty3D = degen011
verify empty3D = degen101
verify empty3D = degen110

//

sys.reset();

verify "array" <> ?
