///
/// inference-c.sym
///
/// temporarily excluded from interpreter
///

// Named Type

sys.reset();

:: Basic := struct { bool b; int i; double d; string s; };

Basic zero := Basic(false, 0, 0.0, "0");
Basic one := Basic(true, 1, 1.0, "1");

verify rtype(Basic) = type
verify Basic = struct { bool b; int i; double d; string s; }

verify rtype(zero.b) = bool
verify rtype(zero.i) = int
verify rtype(zero.d) = double
verify rtype(zero.s) = string

verify zero.b = false
verify zero.i = 0
verify zero.d = 0.0
verify zero.s = "0"

verify rtype(one.b) = bool
verify rtype(one.i) = int
verify rtype(one.d) = double
verify rtype(one.s) = string

verify one.b = true
verify one.i = 1
verify one.d = 1.0
verify one.s = "1"

// T -> lazy T promotion

:: ai := [ 0, 1, int(3 * uniform()), 3 ];
verify ltype(ai) = array[] => int

:: ad := [ 0, 1, 3 * uniform(), 3 ];
verify ltype(ad) = array[] => double

:: ald := [ 0, 1, '3 * uniform()', 3 ];
verify ltype(ald) = array[] => lazy double

:: altiil := ['(0, 1)', (0, 1)];
verify ltype(altiil) = array[] => lazy struct { int; int; }

:: altiir := [(0, 1), '(0, 1)'];
verify ltype(altiir) = array[] => lazy struct { int; int; }

// Named Type

sys.reset();

:: Boxi := struct { int i; };
Boxi boxi := Boxi(42);

verify rtype(Boxi) = type
verify Boxi = struct { int i; }
verify rtype(boxi.i) = int

// Named Type

sys.reset();

:: x4 := struct { int first; string second; }(1, "one");

type Pair :- struct {
	int first;
	string second;
};

:: x5 := Pair(1, "one");

verify x4 <> x5

// => to be merged with inference.sym
