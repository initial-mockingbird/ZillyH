::zilly+
sys.reset();

array[]<Z> a := [ 0, 1, 2, 3 ];

a[0] = 0
a[1] = 1
a[2] = 2
a[3] = 3

sys.reset();

lazy<array[]<Z>> a := [ 0, 1, 2, 3 ];

a[0] = 0
a[1] = 1
a[2] = 2
a[3] = 3

sys.reset();

array[]<array[]<Z>> a := [[0,1],[2,3]];

a[0][0] = 0
a[0][1] = 1
a[1][0] = 2
a[1][1] = 3

sys.reset();

lazy<array[]<array[]<Z>>> a := [[0,1],[2,3]];

a[0][0] = 0
a[0][1] = 1
a[1][0] = 2
a[1][1] = 3

sys.reset();

lazy<array[]<Z>> a := '[ 0, 1, 2, 3 ]';

a[0] = 0
a[1] = 1
a[2] = 2
a[3] = 3

sys.reset();

lazy<array[]<array[]<Z>>> a := '[ [0,1],[2,3] ]';

a[0][0] = 0
a[0][1] = 1
a[1][0] = 2
a[1][1] = 3

sys.reset();

array[]<Z> a := vector(3, fn (Z i) -> 40 + i);

a[0] = 40
a[1] = 41
a[2] = 42

sys.reset();

array[]<Z>  l0 := [ 0,  1,  2,  3 ];
array[]<Z>  l1 := [ 0,  1,  2,  3 ];

l0 = l1


sys.reset();

array[]<array[]<Z>>  I2 := [ [1,0], [0,1] ];

I2[0] = [1,0]
I2[1] = [0,1]

sys.reset();

array[]<Z> L0 := [ 0,  1,  2,  3];
array[]<Z> L1 := [10, 11, 12, 13];
array[]<Z> L2 := [20, 21, 22, 23];
array[]<Z> L3 := [30, 31, 32, 33];

array[]<array[]<Z>> AL := [L0,L1,L2,L3];

L0[3] = 3

L0[3] := 38808;

L0[3] = 38808

AL[0][3] = 3

sys.reset();

array[]<array[]<Z>> l1 := [[800, 801], [810, 811]];
array[]<array[]<Z>> l2 := [[800, 801], [810, 811]];

l1 = l2

sys.reset();

array[]<Z> a0 := [800,801];
array[]<Z> a1 := [810,811];
array[]<array[]<Z>> l9 := [a0,a1];

l9[0][0] := a0[0] + 10;
l9[0][1] := a0[1] + 10;
l9[1][0] := a1[0] + 10;
l9[1][1] := a1[1] + 10;
l9[1][1] := a1[1] + 10;

l9[0][0] = 810
l9[0][1] = 811
l9[1][0] = 820
l9[1][1] = 821
l9[0]    = [810, 811]
l9[1]    = [820, 821]
l9       = [[810, 811], [820, 821]]

sys.reset();

array[]<Z> A := [0];

A[0 .. 0] = [0]

sys.reset();

array[]<Z> a := [ 0,1,2,3 ];

dim(a) = [4]

a[1 .. 2] = [1,2]

sys.reset();

array[]<Z> a := [ 0, 1, 2, 3, 4, 5, 6, 7 ];

a = a[0 .. length(a) - 1]

a[0 .. 6] = [ 0, 1, 2, 3, 4, 5, 6 ]
a[1 .. 6] = [ 1, 2, 3, 4, 5, 6 ]

a[1 .. 6][0 .. 5] = a[1 .. 6]
a[1 .. 6][0 .. 5] = [ 1, 2, 3, 4, 5, 6 ]

a[1 .. 6][1 .. 4] = a[0 .. 7][2 .. 5]
a[1 .. 6][1 .. 4] = a[2 .. 5]
a[0 .. 7][2 .. 5] = [2, 3, 4, 5]
a[1 .. 6][1 .. 4] = [2, 3, 4, 5]

a[1 .. 6][1 .. 4][1 .. 2] = a[0 .. 7][2 .. 5][1 .. 2]
a[1 .. 6][1 .. 4][1 .. 2] = a[2 .. 5][1 .. 2]
a[1 .. 6][1 .. 4][1 .. 2] = a[3 .. 4]
a[1 .. 6][1 .. 4][1 .. 2] = [3, 4]

a[1 .. 6][1 .. 4][1 .. 2][0] = 3
a[0 .. 7][2 .. 5][1 .. 2][1] = 4
a[1 .. 6][1 .. 4][1 .. 2][0] = 3
a[2 .. 5][1 .. 2][1] = 4
a[1 .. 6][1 .. 4][1 .. 2][0] = 3
a[3 .. 4][1] = 4

a[1 .. 6][1 .. 4][1 .. 2][0 .. 1] = [3, 4]

sys.reset();

Z => array[]<Z> randnar := fn (Z n) -> if(n = 0, [], cons(random(50), randnar(n-1)));

array[]<Z> a := randnar(4);

randnar(0)
randnar(1)
randnar(2)
randnar(3)
randnar(4)
