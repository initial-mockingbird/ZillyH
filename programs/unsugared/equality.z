Z => Z => Z eq := fn (Z l) -> fn (Z r) -> if(lt(r)(l),0,if(lt(l)(r),0,1));
Z => Z not := fn (Z x) -> if(lt(1)(x),1,0);
Z => Z => Z and := fn (Z x) -> fn (Z y) -> if(lt(1)(x),0,if(lt(1)(y),0,1));
Z => Z => Z or := fn (Z x) -> fn (Z y) -> if(lt(x)(0),1,if(lt(y)(0),1,0));
Z => Z => Z ne := fn (Z x) -> fn (Z y) -> not(eq(x)(y));
Z => Z => Z gt := fn (Z r) -> fn (Z l) -> and(ne(r)(l))(not(lt(r)(l)));
Z => Z => Z ge := fn (Z r) -> fn (Z l) -> or(eq(r)(l))(gt(r)(l));
Z => Z => Z le := fn (Z r) -> fn (Z l) -> or(eq(r)(l))(lt(r)(l));
Z => Z => Z minus := fn (Z x) -> fn (Z y) -> sub(y)(x);
Z => Z => Z plus := fn (Z x) -> fn (Z y) -> minus(y)(minus(0)(x));
Z => Z chs := fn (Z x) -> minus(0)(x);
Z => Z abs := fn (Z x) -> if(lt(x)(0),x,chs(x));
Z => Z => Z _mlt := fn (Z r) -> fn (Z l) -> if(eq(l)(0),0,plus(r)(_mlt(r)(sub(1)(l))));
Z => Z => Z _mul := fn (Z r) -> fn (Z l) -> if( lt(l)(0), if( lt(r)(0), _mlt(r)(l), chs(_mlt(chs(r))(l))), if( lt(r)(0), chs(_mlt(r)(chs(l))), _mlt(chs(r))(chs(l))));
Z => Z => Z mul := fn (Z r) -> fn (Z l) -> if(lt(abs(r))(abs(l)),_mul(r)(l),_mlt(l)(r));
Z x0 := 5
Z x1 := 6
Z x2 := 5
lazy<Z> z0 := 7
lazy<Z> z1 := 8
lazy<Z> z2 := 7
lazy<lazy<Z>> a0 := 7
lazy<lazy<Z>> a1 := 8
lazy<lazy<Z>> a2 := 7
formula(eq)
eq(x0)(x0)
eq(x0)(x2)
eq(x2)(x0)
eq(x0)(x1)
eq(x1)(x0)
eq(z0)(z0)
eq(z0)(z2)
eq(z2)(z0)
eq(z0)(z1)
eq(z1)(z0)
eq(a0)(a0)
eq(a0)(a2)
eq(a2)(a0)
eq(a0)(a1)
eq(a1)(a0)
