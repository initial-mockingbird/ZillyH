::zilly
Z => Z => Z eq := fn (Z l) -> fn (Z r) -> if(lt(r)(l),0,if(lt(l)(r),0,1));
Z => Z not := fn (Z x) -> if(lt(1)(x),1,0);
Z => Z => Z and := fn (Z x) -> fn (Z y) -> if(lt(1)(x),0,if(lt(1)(y),0,1));
Z => Z => Z or := fn (Z x) -> fn (Z y) -> if(lt(x)(0),1,if(lt(y)(0),1,0));
Z => Z => Z ne := fn (Z x) -> fn (Z y) -> not(eq(x)(y));
Z => Z => Z gt := fn (Z r) -> fn (Z l) -> and(ne(r)(l))(not(lt(r)(l)));
Z => Z => Z ge := fn (Z r) -> fn (Z l) -> or(eq(r)(l))(gt(r)(l));
Z => Z => Z le := fn (Z r) -> fn (Z l) -> or(eq(r)(l))(lt(r)(l));
Z => Z => Z minus := fn (Z x) -> fn (Z y) -> sub(y)(x);
Z => Z => Z plus := fn (Z x) -> fn (Z y) -> minus(y)(minus(0)(x));
Z => Z chs := fn (Z x) -> minus(0)(x);
Z => Z abs := fn (Z x) -> if(lt(x)(0),x,chs(x));
Z => Z => Z _mlt := fn (Z r) -> fn (Z l) -> if(eq(l)(0),0,plus(r)(_mlt(r)(sub(1)(l))));
Z => Z => Z _mul := fn (Z r) -> fn (Z l) -> if( lt(l)(0), if( lt(r)(0), _mlt(r)(l), chs(_mlt(chs(r))(l))), if( lt(r)(0), chs(_mlt(r)(chs(l))), _mlt(chs(r))(chs(l))));
Z => Z => Z mul := fn (Z r) -> fn (Z l) -> if(lt(abs(r))(abs(l)),_mul(r)(l),_mlt(l)(r));
Z => Z f0           := fn(Z x) -> x;
Z => Z f1           := fn(Z x) -> formula(x);
Z => lazy<Z> f2      := fn(Z x) -> x;
Z => lazy<Z> f3      := fn(Z x) -> 'x';
Z => lazy<Z> f4      := fn(Z x) -> formula(x);
lazy<Z> => Z f5      := fn(lazy<Z> x) -> x;
lazy<Z> => lazy<Z> f6 := fn(lazy<Z> x) -> x;
lazy<Z> => lazy<Z> f7 := fn(lazy<Z> x) -> 'x';
lazy<Z> => lazy<Z> f8 := fn(lazy<Z> x) -> formula(x);
lazy<lazy<Z>> => lazy<lazy<Z>> f9 := fn(lazy<lazy<Z>> x) -> formula(x);
Z y := 5
lazy<Z> ly := 'minus(y)(1)';
lazy<lazy<Z>> lly := ''minus(y)(1)'';
eq(f0(y))(5)
f1(y)
f2(y)
f3(y)
f4(y)
f5(y)
f6(y)
f7(y)
f8(y)
f5(ly)
f7(ly)
f8(ly)
f8(lly)
lazy<Z> f7y := f7(ly);
f7y
y := 0;
eq(f0(y))(5)
f3(y)
f4(y)
f5(y)
f7(y)
f8(y)
f5(ly)
f7(ly)
f8(ly)
f8(lly)
f7y := f7(ly);
f7y
f9(lly)
