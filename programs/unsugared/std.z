::zilly
Z => Z => Z eq := fn (Z l) -> fn (Z r) -> if(lt(r)(l),0,if(lt(l)(r),0,1));
Z => Z not := fn (Z x) -> if(lt(1)(x),1,0);
Z => Z => Z and := fn (Z x) -> fn (Z y) -> if(lt(1)(x),0,if(lt(1)(y),0,1));
Z => Z => Z or := fn (Z x) -> fn (Z y) -> if(lt(x)(0),1,if(lt(y)(0),1,0));
Z => Z => Z ne := fn (Z x) -> fn (Z y) -> not(eq(x)(y));
Z => Z => Z gt := fn (Z r) -> fn (Z l) -> and(ne(r)(l))(not(lt(r)(l)));
Z => Z => Z ge := fn (Z r) -> fn (Z l) -> or(eq(r)(l))(gt(r)(l));
Z => Z => Z le := fn (Z r) -> fn (Z l) -> or(eq(r)(l))(lt(r)(l));
Z => Z => Z minus := fn (Z x) -> fn (Z y) -> sub(y)(x);
Z => Z => Z plus := fn (Z x) -> fn (Z y) -> minus(y)(minus(0)(x));
Z => Z chs := fn (Z x) -> minus(0)(x);
Z => Z abs := fn (Z x) -> if(lt(x)(0),x,chs(x));
Z => Z => Z _mlt := fn (Z r) -> fn (Z l) -> if(eq(l)(0),0,plus(r)(_mlt(r)(sub(1)(l))));
Z => Z => Z _mul := fn (Z r) -> fn (Z l) -> if( lt(l)(0), if( lt(r)(0), _mlt(r)(l), chs(_mlt(chs(r))(l))), if( lt(r)(0), chs(_mlt(r)(chs(l))), _mlt(chs(r))(chs(l))));
Z => Z => Z mul := fn (Z r) -> fn (Z l) -> if(lt(abs(r))(abs(l)),_mul(r)(l),_mlt(l)(r));
-1
lt(34)(34)
lt(34)(51)
lt(51)(34)
sub(5)(13)
sub(13)(5)
eq(0)(0)
eq(20)(20)
eq(32)(20)
eq(20)(32)
not(sub(1)(0))
not(0)
not(1)
and(0)(0)
and(0)(1)
and(1)(0)
and(1)(1)
or(0)(0)
or(0)(1)
or(1)(0)
or(1)(1)
ne(0)(0)
ne(20)(20)
ne(32)(20)
ne(20)(32)
gt(0)(0)
gt(20)(20)
gt(32)(20)
gt(20)(32)
ge(0)(0)
ge(20)(20)
ge(32)(20)
ge(20)(32)
le(0)(0)
le(20)(20)
le(32)(20)
le(20)(32)
minus(5)(13)
minus(13)(5)
plus(3)(5)
plus(5)(3)
chs(5)
chs(minus(0)(5))
abs(5)
abs(minus(0)(5))
_mlt(5)(0)
_mlt(5)(1)
_mlt(5)(2)
_mlt(5)(4)
_mul(-5)(3)
_mul(5)(-3)
_mul(-5)(-3)
_mul(5)(3)
mul(-5)(3)
mul(5)(-3)
mul(-5)(-3)
mul(5)(3)
